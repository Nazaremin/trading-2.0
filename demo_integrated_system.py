"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import logging
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
import pandas as pd
import numpy as np

@dataclass
class TradingSystemConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    system_name: str = "Advanced Trading System Demo"
    trading_mode: str = "demo"
    forex_symbols: List[str] = field(default_factory=lambda: ['EURUSD', 'GBPUSD', 'USDJPY'])
    crypto_symbols: List[str] = field(default_factory=lambda: ['BTCUSDT', 'ETHUSDT', 'ADAUSDT'])
    max_portfolio_risk: float = 0.02
    max_positions: int = 10

@dataclass
class TradingSignal:
    """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    symbol: str
    side: str
    confidence: float
    strength: float
    timestamp: datetime
    source: str
    metadata: Dict[str, Any] = field(default_factory=dict)

class DemoTradingSystem:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self, config: TradingSystemConfig):
        self.config = config
        self.logger = logging.getLogger("DemoTradingSystem")
        self.portfolio_value = 100000.0  # $100k demo
        self.positions = {}
        self.total_pnl = 0.0
    
    def generate_market_data(self, symbol: str, periods: int = 100) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dates = pd.date_range(end=datetime.now(), periods=periods, freq='1H')
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω —Å —Ç—Ä–µ–Ω–¥–æ–º
        np.random.seed(hash(symbol) % 2**32)
        trend = 0.0001 if 'BTC' in symbol else 0.00005
        returns = np.random.normal(trend, 0.01, periods)
        prices = 100 * (1 + pd.Series(returns)).cumprod()
        
        return pd.DataFrame({
            'open': prices.shift(1).fillna(prices.iloc[0]),
            'high': prices * (1 + np.abs(np.random.normal(0, 0.005, periods))),
            'low': prices * (1 - np.abs(np.random.normal(0, 0.005, periods))),
            'close': prices,
            'volume': np.random.randint(1000, 10000, periods)
        }, index=dates)
    
    def technical_analysis(self, df: pd.DataFrame) -> Dict[str, float]:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        df['sma_20'] = df['close'].rolling(20).mean()
        df['sma_50'] = df['close'].rolling(50).mean()
        df['rsi'] = self.calculate_rsi(df['close'])
        
        current_price = df['close'].iloc[-1]
        sma_20 = df['sma_20'].iloc[-1]
        sma_50 = df['sma_50'].iloc[-1]
        rsi = df['rsi'].iloc[-1]
        
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SMA
        if current_price > sma_20 > sma_50 and rsi < 70:
            return {"signal": 1, "confidence": 0.7, "rsi": rsi}
        elif current_price < sma_20 < sma_50 and rsi > 30:
            return {"signal": -1, "confidence": 0.7, "rsi": rsi}
        else:
            return {"signal": 0, "confidence": 0.3, "rsi": rsi}
    
    def calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    def sentiment_analysis(self, symbol: str) -> Dict[str, float]:
        """–°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–º–≤–æ–ª–∞
        time_factor = np.sin(time.time() / 3600) * 0.3  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        symbol_factor = hash(symbol) % 100 / 100 - 0.5  # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä —Å–∏–º–≤–æ–ª–∞
        
        sentiment_score = time_factor + symbol_factor * 0.2
        confidence = abs(sentiment_score) + 0.3
        
        return {
            "sentiment": sentiment_score,
            "confidence": min(confidence, 1.0),
            "volume": np.random.randint(100, 1000)
        }
    
    def ml_prediction(self, df: pd.DataFrame) -> Dict[str, float]:
        """–°–∏–º—É–ª—è—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–º–µ–Ω—Ç—É–º–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        returns = df['close'].pct_change().dropna()
        
        if len(returns) < 10:
            return {"prediction": 0, "confidence": 0.1}
        
        momentum = returns.tail(5).mean()
        volatility = returns.tail(20).std()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ = –ø–æ–∫—É–ø–∫–∞
        if momentum > 0 and volatility < returns.std():
            prediction = momentum / volatility
        elif momentum < 0 and volatility < returns.std():
            prediction = momentum / volatility
        else:
            prediction = 0
        
        confidence = min(abs(prediction) * 2, 0.9)
        
        return {"prediction": prediction, "confidence": confidence}
    
    def portfolio_optimization(self, symbols: List[str]) -> Dict[str, float]:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –†–∞–≤–Ω–æ–≤–µ—Å–Ω—ã–µ –≤–µ—Å–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏
        base_weight = 1.0 / len(symbols)
        weights = {}
        
        for i, symbol in enumerate(symbols):
            # –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ "—Ä–∏—Å–∫–∞"
            risk_adjustment = (hash(symbol) % 20 - 10) / 100
            weights[symbol] = max(0.05, base_weight + risk_adjustment)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
        total_weight = sum(weights.values())
        for symbol in weights:
            weights[symbol] /= total_weight
        
        return weights
    
    def risk_management(self, signal: TradingSignal) -> bool:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
        if len(self.positions) >= self.config.max_positions:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if signal.confidence < 0.4:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
        position_risk = self.portfolio_value * 0.01  # 1% —Ä–∏—Å–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        if position_risk > self.portfolio_value * self.config.max_portfolio_risk:
            return False
        
        return True
    
    def execute_trade(self, signal: TradingSignal) -> bool:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        try:
            position_size = self.portfolio_value * 0.01 * signal.confidence
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_price = 100 + np.random.normal(0, 0.1)  # –°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω—ã
            
            self.positions[signal.symbol] = {
                "side": signal.side,
                "size": position_size,
                "entry_price": execution_price,
                "timestamp": signal.timestamp
            }
            
            self.logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: {signal.symbol} {signal.side} ${position_size:.2f}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def calculate_pnl(self) -> float:
        """–†–∞—Å—á–µ—Ç P&L"""
        total_pnl = 0
        
        for symbol, position in self.positions.items():
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            current_price = position["entry_price"] * (1 + np.random.normal(0, 0.02))
            
            if position["side"] == "buy":
                pnl = (current_price - position["entry_price"]) * position["size"] / position["entry_price"]
            else:
                pnl = (position["entry_price"] - current_price) * position["size"] / position["entry_price"]
            
            total_pnl += pnl
        
        return total_pnl
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 70)
        print(f"üìã –°–∏—Å—Ç–µ–º–∞: {self.config.system_name}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.portfolio_value:,.2f}")
        print(f"üìà Forex —Å–∏–º–≤–æ–ª—ã: {self.config.forex_symbols}")
        print(f"ü™ô Crypto —Å–∏–º–≤–æ–ª—ã: {self.config.crypto_symbols}")
        print()
        
        all_symbols = self.config.forex_symbols + self.config.crypto_symbols
        
        # –¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
        for cycle in range(3):
            print(f"üîÑ –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ {cycle + 1}")
            print("-" * 50)
            
            signals = []
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for symbol in all_symbols:
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                market_data = self.generate_market_data(symbol)
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                tech_analysis = self.technical_analysis(market_data)
                print(f"   üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π: —Å–∏–≥–Ω–∞–ª={tech_analysis['signal']}, RSI={tech_analysis['rsi']:.1f}")
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
                sentiment = self.sentiment_analysis(symbol)
                print(f"   üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {sentiment['sentiment']:.2f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sentiment['confidence']:.2f})")
                
                # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                ml_pred = self.ml_prediction(market_data)
                print(f"   ü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {ml_pred['prediction']:.3f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_pred['confidence']:.2f})")
                
                # –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
                combined_signal = (
                    tech_analysis['signal'] * 0.4 +
                    sentiment['sentiment'] * 0.3 +
                    ml_pred['prediction'] * 0.3
                )
                
                combined_confidence = (
                    tech_analysis['confidence'] * 0.4 +
                    sentiment['confidence'] * 0.3 +
                    ml_pred['confidence'] * 0.3
                )
                
                if abs(combined_signal) > 0.2:
                    side = "buy" if combined_signal > 0 else "sell"
                    
                    signal = TradingSignal(
                        symbol=symbol,
                        side=side,
                        confidence=combined_confidence,
                        strength=abs(combined_signal),
                        timestamp=datetime.now(),
                        source="integrated",
                        metadata={
                            "technical": tech_analysis['signal'],
                            "sentiment": sentiment['sentiment'],
                            "ml_prediction": ml_pred['prediction']
                        }
                    )
                    
                    signals.append(signal)
                    print(f"   üéØ –°–ò–ì–ù–ê–õ: {side.upper()} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combined_confidence:.2f})")
            
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if signals:
                print(f"\nüìä –ü–û–†–¢–§–ï–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
                signal_symbols = [s.symbol for s in signals]
                optimal_weights = self.portfolio_optimization(signal_symbols)
                
                for symbol, weight in optimal_weights.items():
                    print(f"   {symbol}: {weight:.1%}")
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            print(f"\n‚ö†Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò –ò –ò–°–ü–û–õ–ù–ï–ù–ò–ï:")
            executed_trades = 0
            
            for signal in signals:
                if self.risk_management(signal):
                    if self.execute_trade(signal):
                        executed_trades += 1
                else:
                    print(f"   ‚ùå –°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")
            
            print(f"   ‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {executed_trades}/{len(signals)}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ P&L
            current_pnl = self.calculate_pnl()
            self.total_pnl += current_pnl
            
            print(f"\nüí∞ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê:")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(self.positions)}")
            print(f"   P&L —Ü–∏–∫–ª–∞: ${current_pnl:,.2f}")
            print(f"   –û–±—â–∞—è P&L: ${self.total_pnl:,.2f}")
            print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${self.portfolio_value + self.total_pnl:,.2f}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            if cycle < 2:
                print(f"\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 70)
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.portfolio_value:,.2f}")
        print(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${self.portfolio_value + self.total_pnl:,.2f}")
        print(f"üíµ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${self.total_pnl:,.2f}")
        print(f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {(self.total_pnl / self.portfolio_value) * 100:.2f}%")
        print(f"üéØ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(self.positions)}")
        
        if self.positions:
            print(f"\nüìã –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
            for symbol, position in self.positions.items():
                print(f"   {symbol}: {position['side']} ${position['size']:.2f} @ ${position['entry_price']:.2f}")
        
        print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    config = TradingSystemConfig(
        system_name="Advanced AI Trading System v2.0",
        forex_symbols=['EURUSD', 'GBPUSD'],
        crypto_symbols=['BTCUSDT', 'ETHUSDT'],
        max_positions=6
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    trading_system = DemoTradingSystem(config)
    await trading_system.run_demo()

if __name__ == "__main__":
    asyncio.run(main())

